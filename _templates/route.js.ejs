const router = require('express').Router();<% if (isSecure) { %>
const passport = require('passport');<% } %>
const { pick } = require('lodash');
const { DEFAULT_PER_PAGE_COUNT,BEARER_KEY } = require('../config/constants');
const { <%= modelName.camelCase %> } = require('../models');
<% if (isSecure) { %>
router.all('*', passport.authenticate(BEARER_KEY));<% } %>


/**
 * @typedef {object} <%= modelName.camelCase %>Paginated
 * @property {integer} totalCount
 * @property {integer} pageIndex
 * @property {array<<%= modelName.camelCase %>>} data
 */

/**
 * GET /api/<%= pluralModelName.kebabCase %>
 * @summary Get <%= pluralModelName.camelCase %> list
 * @tags <%= pluralModelName.camelCase %><% if (isSecure) { %>
 * @security JWT<% } %>
 * @param {integer} pageIndex.query - eg: 0
 * @param {integer} perPageCount.query - eg: 20
 * @return {<%= modelName.camelCase %>Paginated} 200 - <%= pluralModelName.camelCase %> paginated list
 */
router.get('/', (req, res, next) => {
  const { pageIndex = 0, perPageCount = DEFAULT_PER_PAGE_COUNT } = req.query;

  <%= modelName.camelCase %>.findAndCountAll({
    offset: perPageCount * pageIndex,
    limit: perPageCount,
  })
    .then(({ count, rows }) =>
      res.json({
        totalCount: count,
        pageIndex,
        data: rows,
      })
    )
    .catch(next);
});

/**
 * @typedef {object} <%= modelName.camelCase %>CreationData<% for (attributeName in modelAttibutes) { %>
 * @property {<%- modelAttibutes[attributeName].swagger %>} <%= attributeName %><% } %>
 */

/**
 * POST /api/<%= pluralModelName.kebabCase %>
 * @summary Create new <%= modelName.camelCase %>
 * @tags <%= pluralModelName.camelCase %><% if (isSecure) { %>
 * @security JWT<% } %>
 * @param {<%= modelName.camelCase %>CreationData} request.body.required - <%= modelName.camelCase %> data
 * @return {<%= modelName.camelCase %>} 200 - Created <%= modelName.camelCase %>
 */
router.post('/', (req, res, next) => {
  <%= modelName.camelCase %>.create(pick(req.body, [<% for (attributeName in modelAttibutes) { %>
    '<%= attributeName %>',<% } %>
  ]))
    .then((<%= modelName.lowerCamelCase %>) => res.json(<%= modelName.lowerCamelCase %>))
    .catch(next);
});


/**
 * GET /api/<%= pluralModelName.kebabCase %>/{id}
 * @summary Get single <%= modelName.camelCase %>
 * @tags <%= pluralModelName.camelCase %><% if (isSecure) { %>
 * @security JWT<% } %>
 * @param {string} id.path.required
 * @return {<%= modelName.camelCase %>} 200 - <%= modelName.camelCase %>
 */
router.get('/:id', (req, res, next) =>
  <%= modelName.camelCase %>.findByPk(req.params.id)
    .then((<%= modelName.lowerCamelCase %>) => res.json(<%= modelName.lowerCamelCase %>))
    .catch(next)
);

/**
 * PATCH /api/<%= pluralModelName.kebabCase %>/{id}
 * @summary Update single <%= modelName.camelCase %>
 * @tags <%= pluralModelName.camelCase %><% if (isSecure) { %>
 * @security JWT<% } %>
 * @param {string} id.path.required
 * @param {<%= modelName.camelCase %>CreationData} request.body.required
 * @return {<%= modelName.camelCase %>} 200 - Updated <%= modelName.camelCase %>
 */
router.patch('/:id', (req, res, next) =>
  <%= modelName.camelCase %>.update(
    pick(req.body, [<% for (attributeName in modelAttibutes) { %>
      '<%= attributeName %>',<% } %>
    ]),
    {
      where: { id: req.params.id },
      returning: true,
    }
  )
    .then(([count, [<%= modelName.lowerCamelCase %>]]) => res.json(<%= modelName.lowerCamelCase %>))
    .catch(next)
);

/**
 * DELETE /api/<%= pluralModelName.kebabCase %>/{id}
 * @summary Delete single <%= modelName.camelCase %>
 * @tags <%= pluralModelName.camelCase %><% if (isSecure) { %>
 * @security JWT<% } %>
 * @param {string} id.path.required
 * @return {integer} 200 - Deleted count
 */
router.delete('/:id', (req, res, next) =>
  <%= modelName.camelCase %>.destroy({
    where: { id: req.params.id },
  })
    .then((count) => res.json(count))
    .catch(next)
);

module.exports = router;
